"""
This type stub file was generated by pyright.
"""

from typing import override

from caseconverter.caseconverter import StringBuffer

class BoundaryHandler:
    def is_boundary(self, pc: str, c: str) -> bool: ...
    def handle(
        self, pc: str, cc: str, input_buffer: StringBuffer, output_buffer: StringBuffer
    ) -> StringBuffer: ...

class OnDelimeterUppercaseNext(BoundaryHandler):
    def __init__(self, delimiters: str, join_char: str = "") -> None: ...
    @override
    def is_boundary(self, pc: str, c: str) -> bool: ...
    @override
    def handle(
        self, pc: str, cc: str, input_buffer: StringBuffer, output_buffer: StringBuffer
    ) -> StringBuffer: ...

class OnDelimeterLowercaseNext(BoundaryHandler):
    def __init__(self, delimiters: str, join_char: str = "") -> None: ...
    @override
    def is_boundary(self, pc: str, c: str) -> bool: ...
    @override
    def handle(
        self, pc: str, cc: str, input_buffer: StringBuffer, output_buffer: StringBuffer
    ) -> StringBuffer: ...

class OnUpperPrecededByLowerAppendUpper(BoundaryHandler):
    def __init__(self, join_char: str = "") -> None: ...
    @override
    def is_boundary(self, pc: str, c: str) -> bool: ...
    @override
    def handle(
        self, pc: str, cc: str, input_buffer: StringBuffer, output_buffer: StringBuffer
    ) -> StringBuffer: ...

class OnUpperPrecededByLowerAppendLower(BoundaryHandler):
    def __init__(self, join_char: str = "") -> None: ...
    @override
    def is_boundary(self, pc: str, c: str) -> bool: ...
    @override
    def handle(
        self, pc: str, cc: str, input_buffer: StringBuffer, output_buffer: StringBuffer
    ) -> StringBuffer: ...

class OnUpperPrecededByUpperAppendJoin(BoundaryHandler):
    def __init__(self, join_char: str = "") -> None: ...
    @override
    def is_boundary(self, pc: str, c: str) -> bool: ...
    @override
    def handle(
        self, pc: str, cc: str, input_buffer: StringBuffer, output_buffer: StringBuffer
    ) -> StringBuffer: ...

class OnUpperPrecededByUpperAppendCurrent(BoundaryHandler):
    def __init__(self, join_char: str = "") -> None: ...
    @override
    def is_boundary(self, pc: str, c: str) -> bool: ...
    @override
    def handle(
        self, pc: str, cc: str, input_buffer: StringBuffer, output_buffer: StringBuffer
    ) -> StringBuffer: ...
